//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectXDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectXConStr : DbContext
    {
        public ProjectXConStr()
            : base("name=ProjectXConStr")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssessmentMode> AssessmentModes { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BatchModelCourseMapping> BatchModelCourseMappings { get; set; }
        public virtual DbSet<CourseFacultyMapping> CourseFacultyMappings { get; set; }
        public virtual DbSet<Cours> Courses { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<Grader> Graders { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> uspInsertAssessment(string assessmentType)
        {
            var assessmentTypeParameter = assessmentType != null ?
                new ObjectParameter("AssessmentType", assessmentType) :
                new ObjectParameter("AssessmentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertAssessment", assessmentTypeParameter);
        }
    
        public virtual ObjectResult<string> uspInsertBatch(string batchName, Nullable<System.DateTime> batch, Nullable<int> noOfStudent, string sessionQuarter)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var batchParameter = batch.HasValue ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(System.DateTime));
    
            var noOfStudentParameter = noOfStudent.HasValue ?
                new ObjectParameter("NoOfStudent", noOfStudent) :
                new ObjectParameter("NoOfStudent", typeof(int));
    
            var sessionQuarterParameter = sessionQuarter != null ?
                new ObjectParameter("SessionQuarter", sessionQuarter) :
                new ObjectParameter("SessionQuarter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertBatch", batchNameParameter, batchParameter, noOfStudentParameter, sessionQuarterParameter);
        }
    
        public virtual ObjectResult<string> uspInsertCourses(string courseID, string courseTitle, Nullable<decimal> duration, Nullable<int> courseOwner)
        {
            var courseIDParameter = courseID != null ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(string));
    
            var courseTitleParameter = courseTitle != null ?
                new ObjectParameter("CourseTitle", courseTitle) :
                new ObjectParameter("CourseTitle", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(decimal));
    
            var courseOwnerParameter = courseOwner.HasValue ?
                new ObjectParameter("CourseOwner", courseOwner) :
                new ObjectParameter("CourseOwner", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertCourses", courseIDParameter, courseTitleParameter, durationParameter, courseOwnerParameter);
        }
    
        public virtual ObjectResult<string> uspInsertFaculty(Nullable<int> facultyId, string emailId, string name)
        {
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertFaculty", facultyIdParameter, emailIdParameter, nameParameter);
        }
    
        public virtual int uspInsertGrader(Nullable<int> facultyId, Nullable<int> participantId)
        {
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertGrader", facultyIdParameter, participantIdParameter);
        }
    
        public virtual ObjectResult<string> uspInsertionCourseFaculty(string courseId, Nullable<int> facultyId, Nullable<int> priority)
        {
            var courseIdParameter = courseId != null ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(string));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertionCourseFaculty", courseIdParameter, facultyIdParameter, priorityParameter);
        }
    
        public virtual ObjectResult<string> uspInsertModel(string modelName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertModel", modelNameParameter);
        }
    
        public virtual ObjectResult<string> uspInsertParticipant(Nullable<int> participantId, string participantName, string participantEmail)
        {
            var participantIdParameter = participantId.HasValue ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(int));
    
            var participantNameParameter = participantName != null ?
                new ObjectParameter("ParticipantName", participantName) :
                new ObjectParameter("ParticipantName", typeof(string));
    
            var participantEmailParameter = participantEmail != null ?
                new ObjectParameter("ParticipantEmail", participantEmail) :
                new ObjectParameter("ParticipantEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertParticipant", participantIdParameter, participantNameParameter, participantEmailParameter);
        }
    
        public virtual ObjectResult<string> uspModificationCourse(Nullable<int> hours, string courseID, Nullable<int> facultyId)
        {
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(int));
    
            var courseIDParameter = courseID != null ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(string));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspModificationCourse", hoursParameter, courseIDParameter, facultyIdParameter);
        }
    }
}
